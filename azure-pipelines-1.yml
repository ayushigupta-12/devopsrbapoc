# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Azure-Infra_Pool

steps:
- task: Docker@2
  inputs:
    command: login
    containerRegistry: acr-connection

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      az account set --subscription $subscription
      az keyvault secret download --file domain.pfx --encoding base64 --name domain --vault-name devopspockv
      openssl pkcs12 -in domain.pfx -nocerts -out mykey.key -nodes -password pass:
      openssl pkcs12 -in domain.pfx -clcerts -nokeys -out mypoc.crt -nodes -password pass:
      pwd
      ls
      git clone https://github.com/ayushigupta-12/devopsrbapoc

# - task: DownloadSecureFile@1
#   name: certificate
#   inputs:
#     secureFile: mypoc.crt
# - script: |
#     mkdir -p $(System.DefaultWorkingDirectory)/trust/private
#     cp $(certificate.secureFilePath) $(System.DefaultWorkingDirectory)/trust/private
#     echo$(System.DefaultWorkingDirectory)/trust/private
#     git clone https://github.com/ayushigupta-12/devopsrbapoc

# - task: DownloadSecureFile@1
#   name: privatekey
#   inputs:
#     secureFile: mykey.key
# - script: |
#     cp $(privateKey.secureFilePath) $(System.DefaultWorkingDirectory)/trust/private
#     echo $(System.DefaultWorkingDirectory)/trust/private

- task: Docker@2
  inputs:
    command: build
    Dockerfile: 'dockerfile1'
    containerRegistry: jfrogrepo
    repository: dockerimages/myimage
    tags: |
      $(Build.BuildId)
    arguments: '--disable-content-trust=false'

- task: Docker@2
  inputs:
    containerRegistry: 'jfrogrepo'
    repository: 'dockerimages/myimage'
    command: 'push'
    tags: $(Build.BuildId)

- task: JFrogPublishBuildInfo@1
  inputs:
    artifactoryConnection: 'jfrogconnect'
    buildName: myimage
    buildNumber: '$(Build.BuildId)'

- task: JFrogBuildScan@1
  inputs:
    xrayConnection: 'jxray_svc'
    buildName: myimage
    buildNumber: $(Build.BuildId)
    allowFailBuild: true
    vuln: false

- script: |
    docker tag devopsrbapocjfrog.jfrog.io/dockerimages/$(Build.Repository.Name):$(Build.BuildId) acr5000.azurecr.io/$(Build.Repository.Name):$(Build.BuildId)  
    echo $(System.DefaultWorkingDirectory)
    chmod 600 mykey.key
    export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="tcspoc123"
    docker trust key load mykey.key --name tcspoc
    export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE="tcspoc123"
    export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="tcspoc123"
    docker trust signer add --key mypoc.crt tcspoc acr5000.azurecr.io/$(Build.Repository.Name):$(Build.BuildId)
    ls
    pwd
    docker trust inspect --pretty acr5000.azurecr.io/$(Build.Repository.Name):$(Build.BuildId)

- task: Docker@2
  inputs:
    containerRegistry: 'app_acr_registry_service_connection'
    repository: '$(Build.Repository.Name)'
    command: 'push'
    tags: '$(Build.BuildId)'
  env:
    DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: tcspoc123
# - script: |
#     git clone https://2432914:dhj5adkiikcs6an5zmhf2mbop2ovmarwoalqpfew2ntbkbx6trxq@dev.azure.com/RBAPrototypeOrg/RBA%20Prototype%20Project/_git/applicationdevops

# - powershell: |
#     Start-Sleep -Seconds 300  
#   displayName: 'PowerShell Script'

# - task: Bash@3
#   inputs:
#      filePath: 'applicationdevops/imagescanassessment/ImageScanSummaryAssessment.sh'
#      arguments: '$(containerRegistry) $(imageRepository) $(tag) $(subscription)'
